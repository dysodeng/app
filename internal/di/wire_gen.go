// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"

	service2 "github.com/dysodeng/app/internal/application/service"
	"github.com/dysodeng/app/internal/di/modules"
	"github.com/dysodeng/app/internal/domain/service"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository"
	"github.com/dysodeng/app/internal/interfaces/http/handler"
)

// Injectors from wire.go:

// InitApp 初始化应用程序
func InitApp(ctx context.Context) (*App, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	transactionManager, err := ProvideDB(ctx, config)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(config)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(transactionManager)
	userService := service.NewUserService(userRepository)
	userAppService := service2.NewUserAppService(userService)
	userHandler := handler.NewUserHandler(userAppService)
	userModule := modules.NewUserModule(userHandler)
	moduleRegistrar := ProvideModuleRegistry(userModule)
	server := ProvideHTTPServer(config, moduleRegistrar)
	grpcServer := ProvideGRPCServer(config, moduleRegistrar)
	websocketServer := ProvideWebSocketServer(config)
	bus := ProvideEventBus(moduleRegistrar)
	app := NewApp(config, transactionManager, client, moduleRegistrar, server, grpcServer, websocketServer, bus)
	return app, nil
}
