// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/dysodeng/app/internal/api/grpc"
	service4 "github.com/dysodeng/app/internal/api/grpc/service"
	"github.com/dysodeng/app/internal/api/http"
	common3 "github.com/dysodeng/app/internal/api/http/controller/common"
	common2 "github.com/dysodeng/app/internal/application/common"
	service3 "github.com/dysodeng/app/internal/application/user/service"
	"github.com/dysodeng/app/internal/domain/common/service"
	service2 "github.com/dysodeng/app/internal/domain/user/service"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository/common"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository/user"
	"github.com/dysodeng/app/internal/infrastructure/transactions"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitAPI() *http.API {
	transactionManager := transactions.NewGormTransactionManager()
	areaRepository := common.NewAreaRepository(transactionManager)
	areaDomainService := service.NewAreaDomainService(areaRepository)
	areaApplicationService := common2.NewAreaApplicationService(areaDomainService)
	areaController := common3.NewAreaController(areaApplicationService)
	smsRepository := common.NewSmsRepository(transactionManager)
	smsDomainService := service.NewSmsDomainService(smsRepository)
	mailRepository := common.NewMailRepository(transactionManager)
	mailDomainService := service.NewMailDomainService(mailRepository)
	validCodeDomainService := service.NewValidCodeDomainService(smsDomainService, mailDomainService)
	validCodeApplicationService := common2.NewValidCodeAppService(validCodeDomainService)
	validCodeController := common3.NewValidCodeController(validCodeApplicationService)
	api := http.NewAPI(areaController, validCodeController)
	return api
}

func InitGRPC() *grpc.GRPC {
	transactionManager := transactions.NewGormTransactionManager()
	userRepository := user.NewUserRepository(transactionManager)
	userDomainService := service2.NewUserDomainService(userRepository)
	applicationService := service3.NewUserApplication(userDomainService)
	userService := service4.NewUserService(applicationService)
	grpcGRPC := grpc.NewGRPC(userService)
	return grpcGRPC
}

// wire.go:

var (
	// 基础设施层
	InfrastructureSet = wire.NewSet(transactions.NewGormTransactionManager, common.NewAreaRepository, common.NewMailRepository, common.NewSmsRepository, user.NewUserRepository)

	// 领域层
	DomainSet = wire.NewSet(
		InfrastructureSet, service.NewAreaDomainService, service.NewMailDomainService, service.NewSmsDomainService, service.NewValidCodeDomainService, service2.NewUserDomainService,
	)

	// 应用层
	ApplicationSet = wire.NewSet(
		DomainSet, common2.NewAreaApplicationService, common2.NewValidCodeAppService, service3.NewUserApplication,
	)

	// API聚合层
	APISet = wire.NewSet(
		ApplicationSet, common3.NewAreaController, common3.NewValidCodeController, http.NewAPI,
	)

	// gRPC聚合层
	GRPCSet = wire.NewSet(
		ApplicationSet, service4.NewUserService, grpc.NewGRPC,
	)
)
