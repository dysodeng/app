// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"

	"github.com/dysodeng/app/internal/application/file/event/handler"
	service4 "github.com/dysodeng/app/internal/application/file/service"
	service2 "github.com/dysodeng/app/internal/application/passport/service"
	"github.com/dysodeng/app/internal/di/event"
	service3 "github.com/dysodeng/app/internal/domain/file/service"
	"github.com/dysodeng/app/internal/domain/user/service"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository/file"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository/user"
	"github.com/dysodeng/app/internal/interfaces/grpc"
	service5 "github.com/dysodeng/app/internal/interfaces/grpc/service"
	"github.com/dysodeng/app/internal/interfaces/http"
	file2 "github.com/dysodeng/app/internal/interfaces/http/handler/file"
	"github.com/dysodeng/app/internal/interfaces/http/handler/passport"
	"github.com/dysodeng/app/internal/interfaces/websocket"
)

// Injectors from wire.go:

// InitApp 初始化应用程序
func InitApp(ctx context.Context) (*App, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	monitor, err := ProvideMonitor(config)
	if err != nil {
		return nil, err
	}
	logger, err := ProvideLogger(ctx, config)
	if err != nil {
		return nil, err
	}
	transactionManager, err := ProvideDB(ctx, config)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(config)
	if err != nil {
		return nil, err
	}
	mq, err := ProvideMessageQueue(config)
	if err != nil {
		return nil, err
	}
	storage, err := ProvideStorage(config)
	if err != nil {
		return nil, err
	}
	userRepository := user.NewUserRepository(transactionManager)
	userDomainService := service.NewUserDomainService(userRepository)
	passportApplicationService := service2.NewPassportApplicationService(userDomainService)
	passportHandler := passport.NewPassportHandler(passportApplicationService)
	bus := ProvideTypedEventBus(mq)
	fileRepository := file.NewFileRepository(transactionManager)
	uploaderRepository := file.NewUploaderRepository(transactionManager)
	uploaderDomainService := service3.NewUploaderDomainService(transactionManager, bus, fileRepository, uploaderRepository)
	uploaderApplicationService := service4.NewUploaderApplicationService(uploaderDomainService)
	uploaderHandler := file2.NewUploaderHandler(uploaderApplicationService)
	handlerRegistry := http.NewHandlerRegistry(passportHandler, uploaderHandler)
	textMessageHandler := websocket.NewTextMessageHandler()
	binaryMessageHandler := websocket.NewBinaryMessageHandler()
	webSocket := websocket.NewWebSocket(textMessageHandler, binaryMessageHandler)
	fileUploadedHandler := handler.NewFileUploadedHandler()
	eventHandlerRegistry := event.NewHandlerRegistry(fileUploadedHandler)
	fileDomainService := service3.NewFileDomainService(fileRepository)
	fileApplicationService := service4.NewFileApplicationService(fileDomainService)
	fileService := service5.NewFileService(fileApplicationService)
	serviceRegistry := grpc.NewServiceRegistry(fileService)
	server := ProvideHTTPServer(config, handlerRegistry)
	grpcServer := ProvideGRPCServer(ctx, config, serviceRegistry)
	websocketServer := ProvideWebSocketServer(config, webSocket)
	consumerService := ProvideEventConsumerService(mq, logger)
	eventServer := ProvideEventServer(config, consumerService, eventHandlerRegistry)
	app := NewApp(config, monitor, logger, transactionManager, client, mq, storage, handlerRegistry, webSocket, eventHandlerRegistry, serviceRegistry, server, grpcServer, websocketServer, bus, consumerService, eventServer)
	return app, nil
}
