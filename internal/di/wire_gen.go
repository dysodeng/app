// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"

	service2 "github.com/dysodeng/app/internal/application/file/service"
	service4 "github.com/dysodeng/app/internal/application/service"
	"github.com/dysodeng/app/internal/domain/file/service"
	service3 "github.com/dysodeng/app/internal/domain/service"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository"
	"github.com/dysodeng/app/internal/infrastructure/persistence/repository/file"
	"github.com/dysodeng/app/internal/interfaces/http"
	"github.com/dysodeng/app/internal/interfaces/http/handler"
	file2 "github.com/dysodeng/app/internal/interfaces/http/handler/file"
)

// Injectors from wire.go:

// InitApp 初始化应用程序
func InitApp(ctx context.Context) (*App, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	monitor, err := ProvideMonitor(config)
	if err != nil {
		return nil, err
	}
	logger, err := ProvideLogger(ctx, config)
	if err != nil {
		return nil, err
	}
	transactionManager, err := ProvideDB(ctx, config)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(config)
	if err != nil {
		return nil, err
	}
	storage, err := ProvideStorage(config)
	if err != nil {
		return nil, err
	}
	fileRepository := file.NewFileRepository(transactionManager)
	uploaderRepository := file.NewUploaderRepository(transactionManager)
	uploaderDomainService := service.NewUploaderDomainService(transactionManager, fileRepository, uploaderRepository)
	uploaderApplicationService := service2.NewUploaderApplicationService(uploaderDomainService)
	uploaderHandler := file2.NewUploaderHandler(uploaderApplicationService)
	userRepository := repository.NewUserRepository(transactionManager)
	userService := service3.NewUserService(userRepository)
	userAppService := service4.NewUserAppService(userService)
	userHandler := handler.NewUserHandler(userAppService)
	handlerRegistry := http.NewHandlerRegistry(uploaderHandler, userHandler)
	server := ProvideHTTPServer(config, handlerRegistry)
	grpcServer := ProvideGRPCServer(config)
	websocketServer := ProvideWebSocketServer(config)
	bus := ProvideEventBus()
	app := NewApp(config, monitor, logger, transactionManager, client, storage, handlerRegistry, server, grpcServer, websocketServer, bus)
	return app, nil
}
