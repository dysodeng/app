// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/file/v1/file.proto

package v1

import (
	context "context"

	v1 "github.com/dysodeng/app/api/generated/go/proto/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_Metadata_FullMethodName            = "/v1.FileService/Metadata"
	FileService_FileInfo_FullMethodName            = "/v1.FileService/FileInfo"
	FileService_FileReference_FullMethodName       = "/v1.FileService/FileReference"
	FileService_RevokeFileReference_FullMethodName = "/v1.FileService/RevokeFileReference"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FileService 文件服务
type FileServiceClient interface {
	// Metadata 获取服务元数据信息
	Metadata(ctx context.Context, in *v1.MetadataRequest, opts ...grpc.CallOption) (*v1.MetadataResponse, error)
	// FileInfo 获取文件信息
	FileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error)
	// FileReference 文件引用
	FileReference(ctx context.Context, in *FileReferenceRequest, opts ...grpc.CallOption) (*FileReferenceResponse, error)
	// RevokeFileReference 撤销文件引用
	RevokeFileReference(ctx context.Context, in *RevokeFileReferenceRequest, opts ...grpc.CallOption) (*RevokeFileReferenceResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Metadata(ctx context.Context, in *v1.MetadataRequest, opts ...grpc.CallOption) (*v1.MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.MetadataResponse)
	err := c.cc.Invoke(ctx, FileService_Metadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileInfoResponse)
	err := c.cc.Invoke(ctx, FileService_FileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FileReference(ctx context.Context, in *FileReferenceRequest, opts ...grpc.CallOption) (*FileReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileReferenceResponse)
	err := c.cc.Invoke(ctx, FileService_FileReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RevokeFileReference(ctx context.Context, in *RevokeFileReferenceRequest, opts ...grpc.CallOption) (*RevokeFileReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeFileReferenceResponse)
	err := c.cc.Invoke(ctx, FileService_RevokeFileReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility.
//
// FileService 文件服务
type FileServiceServer interface {
	// Metadata 获取服务元数据信息
	Metadata(context.Context, *v1.MetadataRequest) (*v1.MetadataResponse, error)
	// FileInfo 获取文件信息
	FileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error)
	// FileReference 文件引用
	FileReference(context.Context, *FileReferenceRequest) (*FileReferenceResponse, error)
	// RevokeFileReference 撤销文件引用
	RevokeFileReference(context.Context, *RevokeFileReferenceRequest) (*RevokeFileReferenceResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) Metadata(context.Context, *v1.MetadataRequest) (*v1.MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedFileServiceServer) FileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileInfo not implemented")
}
func (UnimplementedFileServiceServer) FileReference(context.Context, *FileReferenceRequest) (*FileReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileReference not implemented")
}
func (UnimplementedFileServiceServer) RevokeFileReference(context.Context, *RevokeFileReferenceRequest) (*RevokeFileReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeFileReference not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}
func (UnimplementedFileServiceServer) testEmbeddedByValue()                     {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Metadata(ctx, req.(*v1.MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_FileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FileInfo(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FileReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FileReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_FileReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FileReference(ctx, req.(*FileReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RevokeFileReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeFileReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RevokeFileReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RevokeFileReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RevokeFileReference(ctx, req.(*RevokeFileReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metadata",
			Handler:    _FileService_Metadata_Handler,
		},
		{
			MethodName: "FileInfo",
			Handler:    _FileService_FileInfo_Handler,
		},
		{
			MethodName: "FileReference",
			Handler:    _FileService_FileReference_Handler,
		},
		{
			MethodName: "RevokeFileReference",
			Handler:    _FileService_RevokeFileReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/file/v1/file.proto",
}
